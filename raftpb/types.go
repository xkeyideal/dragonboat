// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: raft.proto

package raftpb

type MessageType int32

const (
	LocalTick          MessageType = 0
	Election           MessageType = 1
	LeaderHeartbeat    MessageType = 2
	ConfigChangeEvent  MessageType = 3
	NoOP               MessageType = 4
	Ping               MessageType = 5
	Pong               MessageType = 6
	Propose            MessageType = 7
	SnapshotStatus     MessageType = 8
	Unreachable        MessageType = 9
	CheckQuorum        MessageType = 10
	BatchedReadIndex   MessageType = 11
	Replicate          MessageType = 12
	ReplicateResp      MessageType = 13
	RequestVote        MessageType = 14
	RequestVoteResp    MessageType = 15
	InstallSnapshot    MessageType = 16
	Heartbeat          MessageType = 17
	HeartbeatResp      MessageType = 18
	ReadIndex          MessageType = 19
	ReadIndexResp      MessageType = 20
	Quiesce            MessageType = 21
	SnapshotReceived   MessageType = 22
	LeaderTransfer     MessageType = 23
	TimeoutNow         MessageType = 24
	RateLimit          MessageType = 25
	RequestPreVote     MessageType = 26
	RequestPreVoteResp MessageType = 27
	LogQuery           MessageType = 28
)

var MessageType_name = map[int32]string{
	0:  "LocalTick",
	1:  "Election",
	2:  "LeaderHeartbeat",
	3:  "ConfigChangeEvent",
	4:  "NoOP",
	5:  "Ping",
	6:  "Pong",
	7:  "Propose",
	8:  "SnapshotStatus",
	9:  "Unreachable",
	10: "CheckQuorum",
	11: "BatchedReadIndex",
	12: "Replicate",
	13: "ReplicateResp",
	14: "RequestVote",
	15: "RequestVoteResp",
	16: "InstallSnapshot",
	17: "Heartbeat",
	18: "HeartbeatResp",
	19: "ReadIndex",
	20: "ReadIndexResp",
	21: "Quiesce",
	22: "SnapshotReceived",
	23: "LeaderTransfer",
	24: "TimeoutNow",
	25: "RateLimit",
	26: "RequestPreVote",
	27: "RequestPreVoteResp",
	28: "LogQuery",
}

var MessageType_value = map[string]int32{
	"LocalTick":          0,
	"Election":           1,
	"LeaderHeartbeat":    2,
	"ConfigChangeEvent":  3,
	"NoOP":               4,
	"Ping":               5,
	"Pong":               6,
	"Propose":            7,
	"SnapshotStatus":     8,
	"Unreachable":        9,
	"CheckQuorum":        10,
	"BatchedReadIndex":   11,
	"Replicate":          12,
	"ReplicateResp":      13,
	"RequestVote":        14,
	"RequestVoteResp":    15,
	"InstallSnapshot":    16,
	"Heartbeat":          17,
	"HeartbeatResp":      18,
	"ReadIndex":          19,
	"ReadIndexResp":      20,
	"Quiesce":            21,
	"SnapshotReceived":   22,
	"LeaderTransfer":     23,
	"TimeoutNow":         24,
	"RateLimit":          25,
	"RequestPreVote":     26,
	"RequestPreVoteResp": 27,
	"LogQuery":           28,
}

func (x MessageType) String() string {
	return MessageType_name[int32(x)]
}

type EntryType int32

const (
	ApplicationEntry  EntryType = 0
	ConfigChangeEntry EntryType = 1
	EncodedEntry      EntryType = 2
	MetadataEntry     EntryType = 3
)

var EntryType_name = map[int32]string{
	0: "ApplicationEntry",
	1: "ConfigChangeEntry",
	2: "EncodedEntry",
	3: "MetadataEntry",
}

var EntryType_value = map[string]int32{
	"ApplicationEntry":  0,
	"ConfigChangeEntry": 1,
	"EncodedEntry":      2,
	"MetadataEntry":     3,
}

func (x EntryType) String() string {
	return EntryType_name[int32(x)]
}

type ConfigChangeType int32

const (
	AddNode      ConfigChangeType = 0
	RemoveNode   ConfigChangeType = 1
	AddNonVoting ConfigChangeType = 2
	AddWitness   ConfigChangeType = 3
)

var ConfigChangeType_name = map[int32]string{
	0: "AddNode",
	1: "RemoveNode",
	2: "AddNonVoting",
	3: "AddWitness",
}

var ConfigChangeType_value = map[string]int32{
	"AddNode":      0,
	"RemoveNode":   1,
	"AddNonVoting": 2,
	"AddWitness":   3,
}

func (x ConfigChangeType) String() string {
	return ConfigChangeType_name[int32(x)]
}

type StateMachineType int32

const (
	UnknownStateMachine    StateMachineType = 0
	RegularStateMachine    StateMachineType = 1
	ConcurrentStateMachine StateMachineType = 2
	OnDiskStateMachine     StateMachineType = 3
)

var StateMachineType_name = map[int32]string{
	0: "UnknownStateMachine",
	1: "RegularStateMachine",
	2: "ConcurrentStateMachine",
	3: "OnDiskStateMachine",
}

var StateMachineType_value = map[string]int32{
	"UnknownStateMachine":    0,
	"RegularStateMachine":    1,
	"ConcurrentStateMachine": 2,
	"OnDiskStateMachine":     3,
}

func (x StateMachineType) String() string {
	return StateMachineType_name[int32(x)]
}

type CompressionType int32

const (
	NoCompression CompressionType = 0
	Snappy        CompressionType = 1
)

var CompressionType_name = map[int32]string{
	0: "NoCompression",
	1: "Snappy",
}

var CompressionType_value = map[string]int32{
	"NoCompression": 0,
	"Snappy":        1,
}

func (x CompressionType) String() string {
	return CompressionType_name[int32(x)]
}

type ChecksumType int32

const (
	CRC32IEEE ChecksumType = 0
	HIGHWAY   ChecksumType = 1
)

var ChecksumType_name = map[int32]string{
	0: "CRC32IEEE",
	1: "HIGHWAY",
}

var ChecksumType_value = map[string]int32{
	"CRC32IEEE": 0,
	"HIGHWAY":   1,
}

func (x ChecksumType) String() string {
	return ChecksumType_name[int32(x)]
}
